---
// import { Transition } from "@headlessui/react";
// import { Link, useLocation } from "@remix-run/react";
import cx from "classnames";
/* @ts-ignore */
import initialism from "initialism";
import type { PostDetails } from "models/post";
// import { useEffect, useState } from "react";
// import { GiPin } from "react-icons/gi";
// import { genPostUrl } from "lib/url";
// import type { PostResult } from "../models/post";
// import { AstroJSX } from "astro/jsx-runtime";

interface Props {
  color: string;
  selectedTags?: string[];
  post: PostDetails & { url: string };
}

// type SearchRowType = {
//   alreadyApplied?: boolean;
//   className?: string;
//   color: string;
//   disableClickToggle?: boolean;
//   forceOpen?: boolean;
//   post: PostResult;
//   selectedTags?: string[];
//   toggleTag?: (tag: string) => void;
// };

const { post, selectedTags } = Astro.props;
const color = "";
const disableClickToggle = false;
const alreadyApplied = false;

const companyName = post.company?.name || post.company_name;
const companyWordCount = companyName.split(" ").length;
const initialsLength = Math.min(companyWordCount, 3);

type DetailMetadataType = {
  apply_options: {
    link: string;
    title: string;
  }[];
} | null;

const isRemote =
  post.tags.includes("remote") || post.location?.toLowerCase() === "anywhere";
const applyOptions = (post.details_metadata as DetailMetadataType)
  ?.apply_options;

let thumbnail = post.thumbnail;
if (post.company?.id) {
  thumbnail = `/images/company-logo/${post.company.id}.png`;
}

const highlight = undefined;
// const applyUrl = post.company?.id
//   ? `/p/apply/${post.id}`
//   : `/apply/${post.id}`;
const applyUrl = `/p/apply/${post.id}`;
const isExternalApplyLink = !post.company?.id;
const htmxIndicatorId = `htmx-indicator-${post.id}`;
const descriptionId = `description-${post.id}`;
const checkboxId = `checkbox-${post.id}`;
const loadDescEventName = `load-desc-${post.id}`;

// const tagButtons = (post.tags || []).map((tag) => {
//   const isSelected = selectedTags.includes(tag);
//   return (
//     <button
//       class={cx("row-tag", { selected: isSelected })}
//       type="button"
//       onclick="utils.halt(event)"
//     >
//       {tag}
//     </button>
//   );
// });

const tagButtons = undefined;

const PATH_TO_PIN_CIRCLE = "/static/images/pin-circle-svgrepo-com.svg";
const onclick = `utils.toggleOpenState('${checkboxId}', '${descriptionId}')`;
---

<div
  class={cx("search_row group relative mb-2 rounded-md border-0", {
    ["border-orange-200 bg-orange-50 text-black dark:border-slate-700 dark:bg-slate-700 dark:text-white"]:
      !highlight,
    ["border-pink-200 bg-pink-100 dark:border-prussian-blue-900 dark:bg-black dark:text-white"]:
      highlight
  })}
  onclick={onclick}
>
  {
    highlight && (
      <img
        alt="pin"
        src={PATH_TO_PIN_CIRCLE}
        class="absolute right-[-8px] top-[-8px] h-6 w-6 text-red-400"
      />
    )
  }
  <div class="cursor-pointer">
    <div class={cx("flex h-32 items-center space-x-2 px-4")}>
      <span
        class={cx(
          "initials inline-flex w-[60px] shrink-0 items-center justify-center overflow-hidden",
          { "bg-orange-400": !highlight },
          {
            "bg-pink-400": highlight
          }
        )}
      >
        {
          thumbnail ? (
            <span class="flex shadow-sm">
              <img
                alt={`${companyName} logo`}
                class="overflow-hidden"
                loading="lazy"
                src={thumbnail}
              />
            </span>
          ) : (
            <span>
              {initialism(
                companyName
                  .replace(/\([^)]*\)|-()(?=\s|$)/g, "")
                  .replace(/[^a-zA-Z0-9\s]/g, ""),
                initialsLength
              )}
            </span>
          )
        }
      </span>
      <div class="flex grow flex-col">
        <p class="line-clamp-1 font-semibold lg:line-clamp-2">
          {companyName}
        </p>

        <p class="line-clamp-1 font-bold md:line-clamp-2">{post.title}</p>

        <p>
          {
            isRemote ? (
              <span class="italic">
                Remote&nbsp;
                {post.location && (
                  <span class="text-orange-500">({post.location.trim()})</span>
                )}
              </span>
            ) : (
              <span class="italic">{post.location}</span>
            )
          }
        </p>
      </div>
      <div class="tag-container">{tagButtons}</div>
      <span class="m-2">{post.published_at_display}</span>
      {
        alreadyApplied ? (
          <span class="btn-apply done">Applied</span>
        ) : (
          <a
            class="btn-apply"
            href={applyUrl}
            target={isExternalApplyLink ? "_blank" : undefined}
            onclick="utils.halt(event)"
          >
            <span>Apply</span>
          </a>
        )
      }
    </div>
  </div>

  <div onclick="utils.halt(event)">
    <input
      aria-label="toggle show description"
      class="peer hidden"
      type="checkbox"
      id={checkboxId}
    />
    <div
      class="hidden items-center justify-center peer-checked:flex"
      hx-get={`/partials/post-desc-${post.id}`}
      hx-indicator={`#${htmxIndicatorId}`}
      hx-swap="outerHTML focus-scroll:true"
      hx-trigger={"change"}
      id={descriptionId}
    >
      <img
        alt="loading"
        id={htmxIndicatorId}
        class="htmx-indicator m-4 h-8"
        src="/static/images/pacman-loader.svg"
      />
    </div>
  </div>
</div>
